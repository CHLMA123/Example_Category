//
//  OverviewStructureController1.h
//  Example_Category
//
//  Created by MCL on 16/9/3.
//  Copyright © 2016年 MCL. All rights reserved.
//

#import <UIKit/UIKit.h>

@interface OverviewStructureController1 : UIViewController

@end

//http://www.hanshuliang.com/?post=30

/**
 结构体概述 : 结构体是 多个 变量的集合, 变量的类型可以不同;
 
 -- 可进行的操作 : 结构体可以进行 拷贝 赋值操作, 可以作为 函数参数 和 函数返回值;
 
 1. 结构体的基本使用
 
 
 结构体声明 : struct 结构标记 {结构成员} 普通变量;
 
 -- 结构体示例 :
 struct student
 {
 char *name;
 int age;
 };
 
 - 结构标记 : struct 后面的 student 是结构标记, 这个标记 可写 可不写, 其作用是 为结构命名, 结构标记可以代表 {} 中的声明的所有的成员变量;
 
 -- 结构成员 : 在 {} 中定义的变量就是结构成员;
 
 -- 普通变量 : 在声明结构体的时候后面可以加上若干普通变量, 相当于定义结构体变量;
 
 
 
 结构体变量声明 : 可以在定义的时候声明变量, 也可以在定义完结构体使用 结构标记 声明变量;
 
 -- 定义结构体时声明变量 : 这种声明变量的方式可以不用 结构标记, 变量名写在 花括号 后面, 用","号隔开;
 struct student
 {
 char *name;
 int age;
 } s1, s2, s3;
 
 -- 使用结构标记声明 : 结构标记 student 代表了花括号的声明, 是 结构体的简写, 可以使用结构标记代替花括号中的内容;

 struct student s4, s5, s6;
 
 结构体内存分配 : 结构体内存是在声明变量的时候分配的, 如果只声明了结构体, 没有声明对应变量, 那么不会分配内存;
 
 
 
 结构体变量初始化 :
 
 -- 声明结构体的时候初始化 : struct student s1 = {"Tom", 12} ; 注意 初值表中必须时结构体对应类型的常量表达式;
 
 -- 声明之后初始化 : 结构体变量名.成员名 可以访问结构体中的成员变量, s1.name = "Tom"; s2.age = 12;
 
 
 结构体嵌套 : 结构体中的成员变量可以是 结构体变量;
 
 struct student
 {
 char *name;
 int age;
 } s1;
 
 struct class
 {
 struct student s1;
 struct student s2;
 } c1;
 
 */

/*
 2. 结构体与函数
 
 结构体的合法操作 :
 
 -- 整体复制 : 结构体可以复制;
 
 -- 整体赋值 : 声明结构体的时候可以整体赋值, 在其它情况下不可以;
 
 -- & 取地址 : 使用 & 运算符获取 结构体地址;
 
 -- 访问成员 : 使用 结构体变量名.成员变量名 可以访问成员变量;
 
 函数传递结构体方法 :
 
 -- 传递结构体成员 : 将结构体拆开, 将其中的成员变量分别传入;
 
 -- 传递结构体 :  将整个结构体当做参数传入, 这种情况和传递其它类型参数一样, 都是通过值传递的;
 
 struct class create_class(struct student s2, struct student s3)
 {
 struct class c1 = {s2, s3};
 return c1;
 }
 
 -- 传递结构体指针 : 传递结构体的指针, 访问形式如下;
    {
     * 传入一个结构体指针
     * 通过指针访问结构体的方法 :
     *   (*结构体指针变量).成员变量 访问;
     *   结构体指针变量 -> 成员变量 访问;
    }
 
void printf_struct_pointer(struct student *s)
{
    printf("student : (*s).name = %s, (*s).age = %d \n", (*s).name, (*s).age);
    printf("student : s->name = %s, s->age = %d \n", s->name, s->age);
}

结构体指针访问 :

-- 示例 : 定义一个结构体指针;

struct student
{
    char *name;
    int age;
}*p;

-- "." 和 "->"优先级 : 这两个运算符都是从左到右运算, 都是右结合; "." 和 "->" 优先级比 "*" , "++" 优先级要高; 这两个运算符 与 () [] 是四个优先级最高的运算符;

-- ++p->age 分析 : 是对结构体中的 age 进行自增操作;

-- *p->name 分析 : 获取 结构体中的 name 字符串的值(注意不是指针|地址);

-- *p++->name 分析 : 先获取 name 字符串的值, 再将p自增;
 
 
 宏定义方法 : 获取结构体数组大小;
 
 -- sizeof 方法 : sizeof (对象) | sizeof (类型名称) 可以获取对象 或者 类型占用的存储空间, 其返回值是 size_t 类型的, 定义在stddef.h 头文件中;
 */


/*
 前言：定义结构体并不是定义一个变量，而是定义了种数据类型。
 
    结构体和其他类型基础数据类型一样，例如int类型，char类型 只不过结构体可以做成你想要的数据类型。以方便日后的使用。
 　 在实际项目中，结构体是大量存在的。研发人员常使用结构体来封装一些属性来组成新的类型。由于C语言内部程序比较简单，
    研发人员通常使用结构体创造新的“属性”，其目的是简化运算。
 
 　　结构体在函数中的作用不是简便，其最主要的作用就是封装。封装的好处就是可以再次利用。让使用者不必关心这个是什么，只要根据定义使用就可以了。
 */